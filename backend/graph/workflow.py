"""
LangGraph Workflow for GreenCast
"""
from typing import Dict, TypedDict, Annotated
import operator
from langgraph.graph import StateGraph, END
import logging

from agents import DataAgent, FeatureAgent, InsightAgent, ChatAgent
from agents.enhanced_forecast_agent import EnhancedForecastAgent

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class GreenCastState(TypedDict):
    """State for the GreenCast workflow"""
    raw_data: Dict
    processed_data: Dict
    forecast_result: Dict
    insight_result: Dict
    chat_query: str
    chat_response: Dict
    error: str
    latitude: float
    longitude: float


class GreenCastWorkflow:
    """LangGraph workflow orchestrator for GreenCast"""
    
    def __init__(self):
        self.data_agent = DataAgent()
        self.feature_agent = FeatureAgent()
        # Using EnhancedForecastAgent now - created in _generate_forecast method
        self.insight_agent = InsightAgent()
        self.chat_agent = ChatAgent()
        self.graph = self._build_graph()
    
    def _build_graph(self) -> StateGraph:
        """Build the LangGraph workflow"""
        workflow = StateGraph(GreenCastState)
        
        # Add nodes
        workflow.add_node("collect_data", self._collect_data)
        workflow.add_node("process_features", self._process_features)
        workflow.add_node("generate_forecast", self._generate_forecast)
        workflow.add_node("generate_insights", self._generate_insights)
        workflow.add_node("handle_chat", self._handle_chat)
        
        # Define edges
        workflow.set_entry_point("collect_data")
        workflow.add_edge("collect_data", "process_features")
        workflow.add_edge("process_features", "generate_forecast")
        workflow.add_edge("generate_forecast", "generate_insights")
        workflow.add_edge("generate_insights", END)
        
        return workflow.compile()
    
    def _collect_data(self, state: GreenCastState) -> GreenCastState:
        """Node: Collect data"""
        lat = state.get("latitude", 28.6139)
        lon = state.get("longitude", 77.2090)
        logger.info(f"Workflow: Collecting data for ({lat}, {lon})...")
        try:
            result = self.data_agent.run(days=30, latitude=lat, longitude=lon)
            state["raw_data"] = result
            return state
        except Exception as e:
            logger.error(f"Error in data collection: {e}")
            state["error"] = str(e)
            return state
    
    def _process_features(self, state: GreenCastState) -> GreenCastState:
        """Node: Process features"""
        logger.info("Workflow: Processing features...")
        try:
            raw_data = state.get("raw_data", {})
            if "data" in raw_data:
                result = self.feature_agent.run(raw_data["data"])
                state["processed_data"] = result
            return state
        except Exception as e:
            logger.error(f"Error in feature processing: {e}")
            state["error"] = str(e)
            return state
    
    def _generate_forecast(self, state: GreenCastState) -> GreenCastState:
        """Node: Generate forecast"""
        lat = state.get("latitude", 28.6139)
        lon = state.get("longitude", 77.2090)
        logger.info(f"Workflow: Generating enhanced forecast for ({lat}, {lon})...")
        try:
            processed_data = state.get("processed_data", {})
            # Feature agent returns "train_data" key
            if "train_data" in processed_data:
                # Use EnhancedForecastAgent
                forecast_agent = EnhancedForecastAgent()
                
                result = forecast_agent.run(processed_data["train_data"], latitude=lat, longitude=lon)
                logger.info(f"Enhanced forecast complete. Result keys: {result.keys()}")
                state["forecast_result"] = result
            else:
                logger.error(f"No train_data found in processed_data. Keys: {processed_data.keys()}")
            return state
        except Exception as e:
            logger.error(f"Error in forecasting: {e}", exc_info=True)
            state["error"] = str(e)
            return state
    
    def _generate_insights(self, state: GreenCastState) -> GreenCastState:
        """Node: Generate insights - Enhanced agent already provides insights"""
        logger.info("Workflow: Insights already generated by EnhancedForecastAgent")
        # Enhanced agent already includes insights, just pass them through
        forecast_result = state.get("forecast_result", {})
        if forecast_result and 'insights' in forecast_result:
            state["insight_result"] = forecast_result.get('insights', {})
            logger.info("âœ“ Using insights from EnhancedForecastAgent")
        else:
            state["insight_result"] = {"analysis": "No insights available"}
        return state
    
    def _handle_chat(self, state: GreenCastState) -> GreenCastState:
        """Node: Handle chat query"""
        logger.info("Workflow: Handling chat query...")
        try:
            query = state.get("chat_query", "")
            forecast_result = state.get("forecast_result")
            insight_result = state.get("insight_result")
            
            result = self.chat_agent.run(query, forecast_result, insight_result)
            state["chat_response"] = result
            return state
        except Exception as e:
            logger.error(f"Error in chat handling: {e}")
            state["error"] = str(e)
            return state
    
    def run_full_pipeline(self, latitude: float = 28.6139, longitude: float = 77.2090) -> Dict:
        """Run the complete forecasting pipeline"""
        logger.info(f"Starting full GreenCast pipeline for ({latitude}, {longitude})...")
        
        initial_state = GreenCastState(
            raw_data={},
            processed_data={},
            forecast_result={},
            insight_result={},
            chat_query="",
            chat_response={},
            error="",
            latitude=latitude,
            longitude=longitude
        )
        
        final_state = self.graph.invoke(initial_state)
        
        return {
            "status": "success" if not final_state.get("error") else "error",
            "error": final_state.get("error", ""),
            "insights": final_state.get("insight_result", {}),
            "forecast": final_state.get("forecast_result", {})
        }
    
    def chat(self, query: str) -> Dict:
        """Handle a chat query"""
        logger.info(f"Processing chat query: {query}")
        
        result = self.chat_agent.run(query)
        return result


# Singleton instance
workflow_instance = GreenCastWorkflow()
